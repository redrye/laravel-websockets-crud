<?php

namespace Redrye\LaravelWebSocketsCrud\app\WebSockets;

use Redrye\LaravelWebSocketsCrud\app\WebSockets\Messages\PusherMessageFactory;
use BeyondCode\LaravelWebSockets\Contracts\ChannelManager;
use BeyondCode\LaravelWebSockets\DashboardLogger;
use BeyondCode\LaravelWebSockets\Events\WebSocketMessageReceived;
use BeyondCode\LaravelWebSockets\Facades\StatisticsCollector;
use BeyondCode\LaravelWebSockets\Server\Messages\PusherClientMessage;
use Exception;
use Illuminate\Support\Str;
use Ratchet\ConnectionInterface;
use Ratchet\RFC6455\Messaging\MessageInterface;
use Log;

class WebSocketHandler extends \BeyondCode\LaravelWebSockets\Server\WebSocketHandler
{
	public function __construct(ChannelManager $channelManager)
	{
		parent::__construct($channelManager);
	}

	public function onOpen(ConnectionInterface $connection)
	{
		parent::onOpen($connection);

	}

	public function onClose(ConnectionInterface $connection)
	{
		parent::onClose($connection); // TODO: Change the autogenerated stub
	}

	public function onError(ConnectionInterface $connection, Exception $exception)
	{
		parent::onError($connection, $exception); // TODO: Change the autogenerated stub
	}

	public function onMessage(ConnectionInterface $connection, MessageInterface $message)
	{
		/*if (! isset($connection->User.php)) {
			return;
		}
		PusherMessageFactory::createForMessage(
			$message, $connection, $this->channelManager
		)->respond();

		if ($connection->User.php->statisticsEnabled) {
			StatisticsCollector::webSocketMessage($connection->User.php->id);
		}

		WebSocketMessageReceived::dispatch(
			$connection->User.php->id,
			$connection->socketId,
			$message
		);*/
		parent::onMessage($connection, $message);

	}
}
